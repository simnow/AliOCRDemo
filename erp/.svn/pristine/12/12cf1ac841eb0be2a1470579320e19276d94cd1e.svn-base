/**
 * 
 */
package cn.caecc.erp.config;

import java.io.IOException;

import org.activiti.engine.HistoryService;
import org.activiti.engine.IdentityService;
import org.activiti.engine.ProcessEngineConfiguration;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.impl.history.HistoryLevel;
import org.activiti.engine.impl.persistence.StrongUuidGenerator;
import org.activiti.spring.ProcessEngineFactoryBean;
import org.activiti.spring.SpringProcessEngineConfiguration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;

/**
 * @author weizhen
 *
 */
@Configuration
// @ComponentScan(basePackages = "cn.caecc.erp.support.workflow.service")
public class ActivitiConfig {

	@Autowired
	private MybatisConfig mybatisConfig;

	@Autowired
	private TransactionConfig transactionConfig;

	/**
	 * 
	 */
	public ActivitiConfig() {
		// TODO Auto-generated constructor stub
	}

	@Bean(name = "uuidGenerator")
	public StrongUuidGenerator getUuidGenerator() {
		StrongUuidGenerator uuidGenerator = new StrongUuidGenerator();
		return uuidGenerator;
	}

	@Bean(name = "processEngineConfiguration")
	public SpringProcessEngineConfiguration getProcessEngineConfiguration() throws IOException {
		SpringProcessEngineConfiguration processEngineConfiguration = new SpringProcessEngineConfiguration();
		processEngineConfiguration.setDataSource(mybatisConfig.getDataSource());
		processEngineConfiguration.setTransactionManager(transactionConfig.getTransactionManager());
		processEngineConfiguration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);
		processEngineConfiguration.setHistory(HistoryLevel.FULL.getKey());
		processEngineConfiguration.setIdGenerator(getUuidGenerator());
		// PathMatchingResourcePatternResolver resolver = new
		// PathMatchingResourcePatternResolver();
		// processEngineConfiguration.setDeploymentResources(resolver.getResources("classpath:workflow/*"));
		return processEngineConfiguration;
	}

	@Bean(name = "processEngineFactory")
	public ProcessEngineFactoryBean getProcessEngineFactory() throws IOException {
		ProcessEngineFactoryBean processEngineFactory = new ProcessEngineFactoryBean();
		processEngineFactory.setProcessEngineConfiguration(getProcessEngineConfiguration());
		return processEngineFactory;
	}

	@Bean(name = "repositoryService")
	public RepositoryService getRepositoryService() throws Exception {
		ProcessEngineFactoryBean processEngineFactory = this.getProcessEngineFactory();
		return processEngineFactory.getObject().getRepositoryService();
	}

	@Bean(name = "runtimeService")
	public RuntimeService getRuntimeService() throws Exception {
		ProcessEngineFactoryBean processEngineFactory = this.getProcessEngineFactory();
		return processEngineFactory.getObject().getRuntimeService();
	}

	@Bean(name = "identityService")
	public IdentityService getIdentityService() throws Exception {
		ProcessEngineFactoryBean processEngineFactory = this.getProcessEngineFactory();
		return processEngineFactory.getObject().getIdentityService();
	}

	@Bean(name = "taskService")
	public TaskService getTaskService() throws Exception {
		ProcessEngineFactoryBean processEngineFactory = this.getProcessEngineFactory();
		return processEngineFactory.getObject().getTaskService();
	}

	@Bean(name = "historyService")
	public HistoryService getHistoryService() throws Exception {
		ProcessEngineFactoryBean processEngineFactory = this.getProcessEngineFactory();
		return processEngineFactory.getObject().getHistoryService();
	}
}
