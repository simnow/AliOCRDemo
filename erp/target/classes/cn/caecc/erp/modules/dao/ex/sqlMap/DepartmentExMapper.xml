<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="cn.caecc.erp.modules.dao.ex.mapper.DepartmentExMapper">
	<!-- 自定义方法 -->
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Mon Apr 16 
			13:19:12 CST 2018. -->
		Id, PId, Code, TId, Name, Description, Grade, LeaderID, CreateTime,
		CreateUserId,
		UpdateTime, UpdateUserId
	</sql>
	<resultMap
		type="cn.caecc.erp.modules.dao.ex.dto.DepartmentDto" id="dept_map">
		<id column="ID" property="id" />
		<result column="Pid" property="pid" />
		<result column="Name" property="name" />
		<result column="Code" property="code" />
		<result column="Description" property="description" />
		<result column="Grade" property="grade" />
		<result column="LeaderId" property="leaderid" />
		<collection property="children" column="ID"
			ofType="cn.caecc.erp.modules.dao.ex.dto.DepartmentDto"
			select="findDeptByparentId"></collection>
	</resultMap>
	<resultMap
		type="cn.caecc.erp.modules.dao.ex.dto.DepartmentDto" id="dept_detail">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="Pid" property="pid" jdbcType="INTEGER" />
		<result column="Code" property="code" jdbcType="VARCHAR" />
		<result column="TId" property="tid" jdbcType="INTEGER" />
		<result column="Name" property="name" jdbcType="VARCHAR" />
		<result column="Description" property="description"
			jdbcType="VARCHAR" />
		<result column="Grade" property="grade" jdbcType="INTEGER" />
		<result column="LeaderId" property="leaderid"
			jdbcType="INTEGER" />
		<result column="CreateTime" property="createtime"
			jdbcType="TIMESTAMP" />
		<result column="CreateUserId" property="createuserid"
			jdbcType="INTEGER" />
		<result column="UpdateTime" property="updatetime"
			jdbcType="TIMESTAMP" />
		<result column="UpdateUserId" property="updateuserid"
			jdbcType="INTEGER" />
		<result column="pdeptname" property="pdeptname"
			jdbcType="VARCHAR" />
		<result column="leadername" property="leadername"
			jdbcType="VARCHAR" />
		<result column="cusername" property="cusername"
			jdbcType="VARCHAR" />
		<result column="dtypename" property="dtypename"
			jdbcType="VARCHAR" />
	</resultMap>
	<!-- 递归查询开始 -->
	<select id="findDeptAll" resultMap="dept_map">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM department WHERE Grade=1
	</select>
	<select id="findDeptByparentId" parameterType="int"
		resultMap="dept_map">
		SELECT
		<include refid="Base_Column_List"></include>
		FROM department WHERE PId=#{ID}
	</select>
	<!-- 递归查询结束 -->
	<!-- 根据部门查询用户 SELECT U.* FROM department D LEFT JOIN user U ON(D.Id=U.Did) 
		WHERE D.Id=#{id} -->
	<select id="findUserBydept" parameterType="int"
		resultType="cn.caecc.erp.modules.dao.mybatis.entity.User">
		SELECT * FROM user where DId=#{id}
	</select>
	<!-- 根据部门查询用户结束 -->
	<!-- 根据部门名字查询部门 -->
	<select id="findDeptByName" parameterType="String"
		resultType="cn.caecc.erp.modules.dao.mybatis.entity.Department">
		SELECT * FROM department where Name=#{name,jdbcType=VARCHAR}
	</select>
	
	<select id="findDeptByNameLike" parameterType="String"
		resultMap="dept_detail">
		select df.*,dt.name as pdeptname,uf.name as leadername ,ut.name as
		cusername from

		department df left join department dt

		on(df.Pid=dt.ID)

		left join `user` uf

		on(df.leaderID=uf.id)

		left join `user` ut

		on(df.CreateUserId=ut.id)
		<where>
			<if test="_parameter!=null">
			 df.`Name` LIKE "%"#{_parameter}"%"
			</if>
		</where>
	</select>
	
	
	<!-- 查询部门列表分页 -->
	<select id="findDeptPage" parameterType="hashmap"
		resultMap="dept_detail">
		select df.*,dt.name as pdeptname,uf.name as leadername ,ut.name as
		cusername from

		department df left join department dt

		on(df.Pid=dt.ID)

		left join `user` uf

		on(df.leaderID=uf.id)

		left join `user` ut

		on(df.CreateUserId=ut.id)
		<where>
			<if test="id!=null and id!=0">
				df.PId=#{id}
			</if>
		</where>
	</select>
	
	<update id="updateLeaderId" parameterType="int">
		UPDATE department SET LeaderID=NULL
		where Id=#{id}
	</update>
	
	<!-- 查询部门详细信息 -->
	<select id="findDeptDetail" parameterType="int"
		resultMap="dept_detail">

		select df.*,dt.name as pdeptname,uf.name as leadername ,ut.name as
		cusername ,dty.name as dtypename from

		department df left join department dt

		on(df.Pid=dt.ID)

		left join `user` uf

		on(df.leaderID=uf.id)

		left join `user` ut

		on(df.CreateUserId=ut.id)
		
		left join department_type dty
		
		on(df.Tid=dty.Id)

		where df.Id=#{id}
	</select>
	
	<!-- 条件查询部门列表 -->
	<select id="selectDeptByDto"
		parameterType="cn.caecc.erp.modules.dao.ex.dto.DepartmentDto"
		resultType="cn.caecc.erp.modules.dao.mybatis.entity.Department">
		SELECT D.*
		FROM department D ,department_type DT
		<where>
			D.TId=DT.ID
			<if test="id!=null">
				and D.Id=#{id}
			</if>
			<if test="name!=null">
				and D.`Name` LIKE "%"#{name}"%"
			</if>
			<if test="code!=null">
				and D.Code=#{code}
			</if>
			<if test="dtypename!=null">
				and DT.`Name`=#{dtypename}
			</if>
		</where>
	</select>
	
	<!-- 通过部门名称查询该部门下属员工 -->
	<select id="findUsersByDeptName"
		parameterType="java.lang.String"
		resultType="cn.caecc.erp.modules.dao.mybatis.entity.User">
		SELECT u.Id, u.Name FROM department d LEFT JOIN user u ON(d.Id=u.Did)
		WHERE d.Name=#{name}
	</select>
	
	<!-- 通过部门名称查询该部门管理人员（正职和副职） -->
	<select id="findMastersByDeptName"
		parameterType="java.lang.String"
		resultType="cn.caecc.erp.modules.dao.mybatis.entity.User">
		SELECT u.Id, u.Name FROM
		department d
		LEFT JOIN user u
		ON(d.Id=u.Did)
		LEFT JOIN user_role_relationship ur
		ON(u.Id=ur.Id)
		LEFT JOIN role r
		ON(r.Id=ur.RId)
		WHERE d.Name=#{name} and (r.name='leader' or r.name='eputy')
	</select>


	<select id="getDeptInTypes" resultMap="dept_detail">
		SELECT d.*, dt.name as pdeptname
		FROM department d
		LEFT JOIN department_type dt
		ON(d.TId=dt.Id)
		WHERE dt.NAME IN
		<foreach item="item" collection="list" index="index" open="("
			separator="," close=")">#{item}
		</foreach>
	</select>

</mapper>