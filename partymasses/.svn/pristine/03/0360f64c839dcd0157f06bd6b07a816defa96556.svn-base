package com.partymasses.modules.service.impl;

import java.io.File;
import java.io.InputStream;
import java.util.UUID;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aliyuncs.exceptions.ClientException;
import com.aliyun.oss.OSSClient;
import com.aliyun.oss.model.CannedAccessControlList;
import com.aliyun.oss.model.ListObjectsRequest;
import com.aliyun.oss.model.OSSObjectSummary;
import com.aliyun.oss.model.ObjectListing;
import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.auth.sts.AssumeRoleRequest;
import com.aliyuncs.auth.sts.AssumeRoleResponse;
import com.aliyuncs.exceptions.ServerException;
import com.aliyuncs.http.MethodType;
import com.aliyuncs.http.ProtocolType;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.partymasses.modules.service.OSSService;
import com.partymasses.support.constant.Contants;
import com.aliyuncs.auth.sts.AssumeRoleResponse.Credentials;




@Service
public class OSSServiceImpl implements OSSService {
	/*
	@Autowired  
	private HttpSession session;  
	*/
	private final static Logger logger = LoggerFactory.getLogger(OSSServiceImpl.class);

	private String generalOssFolderName(Integer uintId, Integer id, String typeName)
	{
		String strFolder = "unitid_" + uintId.toString() + "/" + typeName + "_" + id.toString();
		return strFolder;
	}
	private String generalObjectOssKeyName(Integer uintId, Integer id, String typeName)
	{
		String strObject = generalOssFolderName(uintId, id, typeName) + "/" + UUID.randomUUID().toString();
		return strObject;
	}
	
	@Override
	public String putNewsImage(Integer uintId, Integer newId, String strPath)
	{
		String accessKeyId = Contants.OSSACCESSKEYID;
		String accessKeySecret = Contants.OSSACCESSKEYSECRET;
		
	    File file = new File(strPath);  

	    String strKey = generalObjectOssKeyName(uintId, newId, "news") ;
		String strUrl = Contants.OSSURLPREFIX + strKey;
		// 创建OSSClient实例
		OSSClient ossClient = new OSSClient(Contants.OSSENDPOINT, accessKeyId, accessKeySecret);

		// 上传文件
		ossClient.putObject(Contants.OSSNEWSIMAGEBUCKET, strKey, file);
		ossClient.setObjectAcl(Contants.OSSNEWSIMAGEBUCKET, strKey, CannedAccessControlList.PublicRead);

		// 关闭client
		ossClient.shutdown();	
		
		return strUrl;
				
	}
	@Override
	public String putNewsImage(Integer uintId, Integer newId, InputStream inputStream)
	{
		String accessKeyId = Contants.OSSACCESSKEYID;
		String accessKeySecret = Contants.OSSACCESSKEYSECRET;
		

	    String strKey = generalObjectOssKeyName(uintId, newId, "news") ;
		String strUrl = Contants.OSSURLPREFIX + strKey;
		// 创建OSSClient实例
		OSSClient ossClient = new OSSClient(Contants.OSSENDPOINT, accessKeyId, accessKeySecret);

		// 上传文件
		ossClient.putObject(Contants.OSSNEWSIMAGEBUCKET, strKey, inputStream);
		ossClient.setObjectAcl(Contants.OSSNEWSIMAGEBUCKET, strKey, CannedAccessControlList.PublicRead);

		// 关闭client
		ossClient.shutdown();	
		
		return strUrl;
				
	}
	
	
	@Override
	public void deleteNewsImages(Integer uintId, Integer newId)
	{
		String accessKeyId = Contants.OSSACCESSKEYID;
		String accessKeySecret = Contants.OSSACCESSKEYSECRET;
		OSSClient ossClient = new OSSClient(Contants.OSSENDPOINT, accessKeyId, accessKeySecret);
		//模拟文件夹名，一个新闻存在对应的文件夹,prefix为模拟文件夹名
		String prefix = generalOssFolderName(uintId, newId, "news");

		ListObjectsRequest listObjectsRequest = new ListObjectsRequest(Contants.OSSNEWSIMAGEBUCKET);
		listObjectsRequest.setPrefix(prefix);
		listObjectsRequest.setMaxKeys(1000); //最大返回文件列表数
		ObjectListing listing = ossClient.listObjects(listObjectsRequest);
		
		for (OSSObjectSummary objectSummary : listing.getObjectSummaries()) 
		{			    
			ossClient.deleteObject(Contants.OSSNEWSIMAGEBUCKET, objectSummary.getKey());
		}
		
		// 关闭client
		ossClient.shutdown();

	}
	
	 public static AssumeRoleResponse assumeRole(String accessKeyId, String accessKeySecret,
             String roleArn, String roleSessionName, String policy,
             ProtocolType protocolType) throws ClientException, ServerException, com.aliyuncs.exceptions.ClientException
	 {
		 
		 IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", accessKeyId, accessKeySecret);	

		 DefaultAcsClient client = new DefaultAcsClient(profile);
		// 创建一个 AssumeRoleRequest 并设置请求参数
		 final AssumeRoleRequest request = new AssumeRoleRequest();
		 request.setVersion("2015-04-01");
		 request.setMethod(MethodType.POST);
		 request.setProtocol(protocolType);
		
		 request.setRoleArn(roleArn);
		 request.setRoleSessionName(roleSessionName);
		 request.setPolicy(policy);
		
		 // 发起请求，并得到response
		 final AssumeRoleResponse response = (AssumeRoleResponse) client.getAcsResponse(request);
		
		 return response;		 
			
			 
	 }
	
	@Override
	public Credentials getSTSOSSAssumeRole()
	{
	    String policy = null;
	    ProtocolType protocolType = ProtocolType.HTTPS;
	    Credentials credentials = null;
	    try
	    {
		    AssumeRoleResponse response = assumeRole(Contants.STSACCESSKEYID, 
		    		Contants.STSACCESSKEYSECRET, 
		    		Contants.RAMOSSWRITEROLEARN,	    		
		    		Contants.RAMOSSWRITEROLESESSIONNAME,
		    		policy,
		    		protocolType);
		    
		    credentials =  response.getCredentials();
		    /*
		    String accesskeyid = credentials.getAccessKeyId();
		    String accesskeysecret = credentials.getAccessKeySecret();//这个就是我们想要的安全token　String securitytoken = response.getCredentials().getSecurityToken();
		    System.out.print(accesskeyid);
		    System.out.print(accesskeysecret);
		    */
	    }
	    catch (Exception ex)
	    {
	    	logger.info(ex.getMessage());
	    	ex.printStackTrace();
	    }
	    return credentials;

	}
	

}
