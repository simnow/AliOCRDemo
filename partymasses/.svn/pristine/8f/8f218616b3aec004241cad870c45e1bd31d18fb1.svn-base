package com.partymasses.controller;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.partymasses.modules.dao.mybatis.entity.NewsWithBLOBs;
import com.partymasses.modules.dao.mybatis.entity.User;
import com.partymasses.modules.service.NewService;
import com.partymasses.support.constant.Contants;
import com.partymasses.support.message.Message;
import com.partymasses.support.util.DateUtil;

/**
 * 新闻 ，通用
 * 
 * @author GaiNing
 *
 */
@Controller
@RequestMapping(value = "api/news")
public class NewsController {
	@Autowired
	private NewService newService;

	/**
	 * 通过id查询新闻，添加阅读量
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	@ResponseBody
	public Message getNewsById(@PathVariable("id") int newsId, HttpServletRequest req) {
		User userinfo = (User) req.getSession().getAttribute(Contants.LOGINUSER);
		if(userinfo==null){ //直接增加阅读量
			newService.insertCount(newsId,Contants.ReadType);
		}else{
			newService.insertRecordAndCount(newsId,userinfo);
		}
		Message message=new Message();
		message.setObj(newService.findNewsById(newsId));
		return message;
	}

	/**
	 * 通过单位id，查询新闻列表
	 * 
	 * @param unitid
	 * @return
	 */
	@RequestMapping(value = "/unit/{unitid}", method = RequestMethod.GET)
	@ResponseBody
	public Message getNewsByUnit(@PathVariable("unitid") int unitid) {
		Message message=new Message();
		message.setObj(newService.findNewsListByUnitId(unitid));
		return message;
	}

	/**
	 * 查询所有
	 * 
	 * @return
	 */
	@RequestMapping(method = RequestMethod.GET)
	@ResponseBody
	public Message getNewsList() {
		Message message=new Message();
		message.setObj(newService.findNewList());
		return message;
	}

	/**
	 * 增加新闻，如果是超级管理员需要添加单位id
	 * 
	 * @param news
	 * @param req
	 * @return
	 */
	@RequestMapping(method = RequestMethod.POST)
	@ResponseBody
	@RequiresRoles(value = { Contants.SUPERADMIN, Contants.ADMIN }, logical = Logical.OR)
	public Message insertNews(NewsWithBLOBs news, HttpServletRequest req) {
		User userinfo = (User) req.getSession().getAttribute(Contants.LOGINUSER);
		Message message = new Message();
		news.setCreateuser(userinfo.getId());
		news.setCreatetime(DateUtil.getcurrentDateTime());
		// 如果是超级管理员，那么单位id取传入的值，如果是管理员，直接就是当下用户的
		if (Contants.SUPERADMIN.equals(userinfo.getRoletype())) {
			news.setUnitid(news.getUnitid());
		} else if (Contants.ADMIN.equals(userinfo.getRoletype())) {
			news.setUnitid(userinfo.getUnitid());
		} else if (Contants.USER.equals(userinfo.getRoletype())) {
			message.setMsg("你没有权限");
			message.setSuccess(false);
			return message;
		}
		int result = newService.insertNews(news);
		if (result > 0) {
			message.setMsg("插入成功");
			message.setObj(result);
		} else {
			message.setMsg("插入失败");
			message.setSuccess(false);
		}
		return message;
	}

	/**
	 * 修改新闻
	 * 
	 * @param news
	 * @param req
	 * @return
	 */
	@RequestMapping(method = RequestMethod.PUT)
	@ResponseBody
	@RequiresRoles(value = { Contants.SUPERADMIN, Contants.ADMIN }, logical = Logical.OR)
	public Message updateNews(NewsWithBLOBs news, HttpServletRequest req) {
		User userinfo = (User) req.getSession().getAttribute(Contants.LOGINUSER);
		Message message = new Message();
		// 如果是超级管理员，不做任何操作
		if (Contants.ADMIN.equals(userinfo.getRoletype())) {
			news.setUnitid(userinfo.getUnitid());
		} else if (Contants.USER.equals(userinfo.getRoletype())) {
			message.setMsg("你没有权限");
			message.setSuccess(false);
			return message;
		}
		return newService.updateNewsById(news);
	}

	/**
	 * 删除新闻
	 * 
	 * @param id
	 * @param req
	 * @return
	 */
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseBody
	@RequiresRoles(value = { Contants.SUPERADMIN, Contants.ADMIN }, logical = Logical.OR)
	public Message deleteNews(int id, HttpServletRequest req) {
		User userinfo = (User) req.getSession().getAttribute(Contants.LOGINUSER);
		Message message = new Message();
		// 如果是超级管理员，不做任何操作
		if (Contants.USER.equals(userinfo.getRoletype())) {
			message.setMsg("你没有权限");
			message.setSuccess(false);
			return message;
		}
		return newService.deleteNewsById(id, userinfo);
	}
}
