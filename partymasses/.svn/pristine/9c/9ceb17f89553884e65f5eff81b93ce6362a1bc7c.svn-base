package com.partymasses.modules.service.impl;



import javax.servlet.http.HttpSession;

import org.apache.tomcat.util.bcel.classfile.Constant;
import org.springframework.stereotype.Service;

import com.aliyuncs.DefaultAcsClient;
import com.aliyuncs.IAcsClient;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest;
import com.aliyuncs.dysmsapi.model.v20170525.SendSmsResponse;
import com.aliyuncs.exceptions.ClientException;
import com.aliyuncs.profile.DefaultProfile;
import com.aliyuncs.profile.IClientProfile;
import com.mysql.jdbc.Constants;
import com.partymasses.modules.service.SmsService;
import com.partymasses.support.constant.Contants;
import com.partymasses.support.message.Message;
import com.partymasses.support.util.DateUtil;
@Service
public class SmsServiceImpl implements SmsService{
	@Override
	public SendSmsResponse sendLoginSms(String phonenumber, String mess) throws ClientException {
		// TODO Auto-generated method stub
		return sendSms(phonenumber,mess,Contants.LOGINMODEL);
	}
	@Override
	public SendSmsResponse sendUpdateSms(String phonenumber, String mess) throws ClientException {
		// TODO Auto-generated method stub
		return sendSms(phonenumber,mess,Contants.UPDATEMODEL);
	}
	@Override
	public Message checkLoginSms(String phonenumber, String code, HttpSession session) {
		// TODO Auto-generated method stub
		return checkSms(phonenumber, code, Contants.LOGINSMS, session);
	}
	@Override
	public Message checkUpdateSms(String phonenumber, String code, HttpSession session) {
		// TODO Auto-generated method stub
		return checkSms(phonenumber, code, Contants.UPDATESMS, session);
	}
	public Message checkSms(String phonenumber,String code, String modeltype,HttpSession session) {
		// TODO Auto-generated method stub
		if(code==null||"".equals(code)){
				return new Message(false,"请填写验证码");	
		}
		String storecode=(String) session.getAttribute(phonenumber+modeltype);
		if(storecode==null||"".equals(storecode)){
				return new Message(false,"请您先获取验证码");	
			}
		String[] strarr=storecode.split(",");
		Long sendtime=Long.parseLong(strarr[1]);
		Long endtime=DateUtil.getcurrentDateTime().getTime();
		Long diff=endtime-sendtime;
		if(diff/(1000*60)>=15){
			return new Message(false,"验证码超时，请重新获取");
		}
		if(!code.equals(strarr[0])){
			return new Message(false,"验证码不正确");
		}
		return  new Message(true,"验证成功");
	}
	public SendSmsResponse sendSms(String phonenumber, String mess, String modeltype) throws ClientException {
		// TODO Auto-generated method stub
		 System.setProperty("sun.net.client.defaultConnectTimeout", "10000");
	        System.setProperty("sun.net.client.defaultReadTimeout", "10000");

	        //初始化acsClient,暂不支持region化
	        IClientProfile profile = DefaultProfile.getProfile("cn-hangzhou", Contants.ACCESSKEYID, Contants.ACCESSKEYSECRET);
	        DefaultProfile.addEndpoint("cn-hangzhou", "cn-hangzhou", Contants.PRODUCT, Contants.DOMAIN);
	        IAcsClient acsClient = new DefaultAcsClient(profile);

	        //组装请求对象-具体描述见控制台-文档部分内容
	        SendSmsRequest request = new SendSmsRequest();
	        //必填:待发送手机号
	        request.setPhoneNumbers(phonenumber);
	        //必填:短信签名-可在短信控制台中找到
	        request.setSignName("魏振");
	        //必填:短信模板-可在短信控制台中找到
	        request.setTemplateCode(modeltype);
	        //可选:模板中的变量替换JSON串,如模板内容为"亲爱的${name},您的验证码为${code}"时,此处的值为
	        request.setTemplateParam(mess);

	        //选填-上行短信扩展码(无特殊需求用户请忽略此字段)
	        //request.setSmsUpExtendCode("90997");

	        //可选:outId为提供给业务方扩展字段,最终在短信回执消息中将此值带回给调用者
	        //request.setOutId("yourOutId");

	        //hint 此处可能会抛出异常，注意catch
	        SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);

	        return sendSmsResponse;
	}

}
