package com.partymasses.controller;

import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringUtils;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresRoles;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.partymasses.modules.dao.mybatis.entity.User;
import com.partymasses.modules.service.UserService;
import com.partymasses.support.constant.Contants;
import com.partymasses.support.message.Message;
import com.partymasses.support.util.AesUtil;
@Controller
@RequestMapping(value = "/api/user")
public class UserController {

	private final static Logger logger = LoggerFactory.getLogger(UserController.class);
	
	@Autowired
	private UserService userService;

	@ResponseBody
	@RequestMapping(value = "/login")
	public Message login(String mobile, String password) {
		
		Message message = new Message();
		logger.info("登陆用户输入，用户手机号【{}】,密码【{}】",mobile,password);
		if (StringUtils.isBlank(password) || StringUtils.isBlank(mobile)) {
			message.setSuccess(false);
			logger.info("缺少参数pw【{}】，mobile【{}】",password,mobile);
			message.setMsg("缺少参数");
			return message;
		}
		password = AesUtil.encrypt(password);
		return message = userService.userLogin(mobile, password);
	}

	/**
	 * ,超级管理员，管理员删除,只能删除和管理员同一个单位的
	 * @param id
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "{id}", method = RequestMethod.DELETE)
	@RequiresRoles(value={Contants.SUPERADMIN,Contants.ADMIN},logical=Logical.OR)
	public Message admindel(int id,HttpServletRequest req) {
		User userinfo=(User)req.getSession().getAttribute(Contants.LOGINUSER);
		return userService.delByIdAndUnit(id,userinfo);
	}
	/**
	 * 更新密码
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/modifyPwd", method = RequestMethod.PUT)
	public Message modifyPwd(String oldPw,String newPwd) {
		if(StringUtils.isBlank(oldPw)||StringUtils.isBlank(newPwd)){
			Message message=new Message();
			message.setSuccess(false);
			message.setMsg("输入的有为空项");
			return message;
		}
		return userService.updatePassWord(oldPw, newPwd);
	}
	
	/**
	 * 完善个人信息
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.PUT)
	public Message updateUser(@RequestBody User user) {
		return userService.updateUserById(user);
	}
	
	/**
	 * 添加用户，超级管理员
	 * @return
	 */
	@ResponseBody
	@RequiresRoles(Contants.SUPERADMIN)
	@RequestMapping(method=RequestMethod.POST)
	public Message insertUser(@RequestBody User user){
		Message message=new Message();
		message.setSuccess(false);
		if(StringUtils.isBlank(user.getMobile())){
			message.setMsg("注册手机号为空");
			return message;
		}
		//判断手机哈是否已经存在
		if(userService.isExitMobile(user.getMobile())){
			message.setMsg("该手机号已经被注册");
			return message;
		}
		//用户密码默认
		return userService.insertUser(user);
	}
	
	/**
	 * 通过单位id查询所有管理员
	 */
	@ResponseBody
	@RequiresRoles(Contants.SUPERADMIN)
	@RequestMapping(value = "/admins",method=RequestMethod.GET)
	public Message selectAdminByUnit(int unitid){
		return userService.getadminList(unitid);
	}
	
	/**
	 * 查询所有用户
	 * @return
	 */
	@ResponseBody
	@RequestMapping(method = RequestMethod.GET)
	@RequiresRoles(value = { Contants.SUPERADMIN, Contants.ADMIN }, logical = Logical.OR)
	public Message selectAllUser(HttpServletRequest req) {
		Message message=new Message();
		User userinfo=(User)req.getSession().getAttribute(Contants.LOGINUSER);
		String name=req.getParameter("name");
		String mobile=req.getParameter("mobile");
		if(StringUtils.isBlank(name)&&StringUtils.isBlank(mobile)){
			if(Contants.SUPERADMIN.equals(userinfo.getRoletype())){
				message.setObj(userService.getListUserIdByUnitId(0));
			}else if(Contants.ADMIN.equals(userinfo.getRoletype())){
				message.setObj(userService.getListUserIdByUnitId(userinfo.getUnitid()));
			}
			return message;
		}
		return userService.selectUserByMobileOrName(name,mobile,userinfo.getRoletype(),userinfo.getUnitid());
	}
	
}
